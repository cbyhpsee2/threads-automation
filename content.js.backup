function extractUserIds() {
  const userIds = new Set();
  const links = document.querySelectorAll('a[href^="/@"]');
  
  links.forEach(link => {
    const href = link.getAttribute('href');
    if (href && href.startsWith('/@')) {
      const userId = href.substring(2); // '@' 제거
      userIds.add(userId);
    }
  });

  return Array.from(userIds);
}

function clickFirstUserContent() {
  // 첫 번째 사용자 아이디 링크 찾기
  const firstUserLink = document.querySelector('a[href^="/@"]');
  if (firstUserLink) {
    // 해당 사용자의 게시물 컨테이너 찾기
    const userContainer = firstUserLink.closest('.x78zum5');
    if (userContainer) {
      // 게시물 내용을 포함하는 div 찾기
      const contentDiv = userContainer.querySelector('.x1a6qonq.x6ikm8r.x10wlt62');
      if (contentDiv) {
        console.log('클릭할 요소 찾음:', contentDiv);
        contentDiv.click();
      }
    }
  }
}

// 자동 이동 상태 관리
let isAutoNavigateEnabled = false;
let currentIndex = 0;
let postLinks = [];

// 우측 상단 알림(Toast) 표시 함수
function showToast(message) {
  const existingToast = document.getElementById('custom-toast');
  if (existingToast) existingToast.remove();

  const toast = document.createElement('div');
  toast.id = 'custom-toast';
  toast.textContent = message;
  toast.style.cssText = `
    position: fixed;
    top: 30px;
    right: 30px;
    background: #323232;
    color: #fff;
    padding: 16px 32px;
    border-radius: 8px;
    font-size: 16px;
    z-index: 1000000;
    box-shadow: 0 2px 8px rgba(0,0,0,0.15);
    opacity: 0.95;
    transition: opacity 0.3s;
  `;
  document.body.appendChild(toast);
  setTimeout(() => {
    toast.style.opacity = '0';
    setTimeout(() => toast.remove(), 300);
  }, 2000);
}

// 리포스트 버튼을 정확히 찾는 함수
function findRepostButton(extraClass = "") {
  const selector = `div[role="button"]${extraClass}`;
  const buttons = document.querySelectorAll(selector);
  for (const btn of buttons) {
    const repostSvg = btn.querySelector('svg[aria-label="리포스트"]');
    if (repostSvg) {
      // 이미 리포스트된 경우 path d 속성 체크
      const alreadyReposted = repostSvg.querySelector('path[d="m11.733 7.2-3.6 3.6L6.27 8.937"]');
      if (!alreadyReposted) {
        return btn;
      }
    }
  }
  return null;
}

// 포스트 페이지에서 좋아요, 리포스트, 두번째 리포스트 버튼 자동 클릭 및 알림
function autoClickLikeAndRepostWithNotify() {
  // 포스트 페이지인지 확인 (URL에 /post/ 포함)
  if (!window.location.pathname.includes('/post/')) return;

  // 1. 현재 페이지 주소에서 아이디 추출
  const match = window.location.pathname.match(/^\/(@[\w.\-]+)\/post\//);
  if (!match) return;
  const pageOwnerId = match[1].replace('@', '');

  // 2. 게시글 작성자 아이디 추출
  const userLink = document.querySelector('.x1a2a7pz.x1n2onr6 a[href^="/@"]');
  if (!userLink) return;
  const authorHref = userLink.getAttribute('href');
  const authorId = authorHref.replace('/@', '');

  // 3. 동일하지 않으면 리포스트 실행하지 않음
  if (pageOwnerId !== authorId) {
    console.log('페이지 주소와 게시글 작성자가 다르므로 리포스트를 실행하지 않습니다.');
    return;
  }

  // 1. 0.5초 후 좋아요 버튼 클릭
  setTimeout(() => {
    const likeBtn = document.querySelector('div.x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xdj266r.x11i5rnm.xat24cr.x2lwn1j.xeuugli.xexx8yu.x4uap5.x18d9i69.xkhd6sd.x1n2onr6.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1o1ewxj.x3x9cwd.x1e5q0jg.x13rtm0m.x3nfvp2.x1q0g3np.x87ps6o.x1lku1pv.x1a2a7pz.x139jcc6[role="button"]');
    if (likeBtn) {
      // 좋아요 버튼 내부에 aria-label이 '좋아요 취소'인 svg가 있으면 이미 눌린 상태
      const likedSvg = likeBtn.querySelector('svg[aria-label="좋아요 취소"]');
      if (!likedSvg) {
        likeBtn.click();
        showToast('좋아요 버튼이 자동으로 눌렸습니다!');
        console.log('좋아요 버튼 자동 클릭 완료');
      } else {
        console.log('이미 좋아요가 눌린 상태입니다.');
      }
    }
    
    // 2. 0.5초 후 리포스트 버튼 클릭
    setTimeout(() => {
      const repostBtn = document.querySelector('div[role="button"] svg[aria-label="리포스트"]')?.closest('div[role="button"]');
      if (repostBtn) {
        repostBtn.click();
        showToast('리포스트 버튼이 자동으로 눌렸습니다!');
        console.log('리포스트 버튼 자동 클릭 완료');
        
        // 1.5초 후 두 번째 리포스트 버튼 클릭
        setTimeout(() => {
          const popup = document.querySelector('div.x1q05qs2.x1q0q8m5.xso031l.x1y1aw1k.x1sxyh0.xwib8y2.xurb0ha.x1t1lzn6.xqa828d');
          if (popup) {
            const buttons = popup.querySelectorAll('div[role="button"]');
            const secondRepostBtn = Array.from(buttons).find(btn => {
              const span = btn.querySelector('span');
              return span && span.textContent.trim() === '리포스트';
            });
            
            if (secondRepostBtn) {
              secondRepostBtn.click();
              showToast('두 번째 리포스트 버튼이 클릭되었습니다!');
              console.log('두 번째 리포스트 버튼 클릭 완료');

              // 1초 후 답글 작성 버튼 클릭
              setTimeout(() => {
                const replyBtn = document.querySelector('div.x1i10hfl.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xdj266r.xat24cr.x2lwn1j.xeuugli.x1n2onr6.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1q0g3np.x87ps6o.x1lku1pv.x1a2a7pz.x6s0dn4.x90nhty.x1z11no5.xjy5m1g.x1mnwbp6.x4pb5v6.x78zum5.x1cvoeml.xlqzeqv.xqmxbcd.xmupa6y.x1iorvi4.x150jy0e.xjkvuk6.x1e558r4.xloyg6u.xsfd0l6.x14l2wxj.x1r4do1t[role="button"]');
                if (replyBtn) {
                  replyBtn.click();
                  console.log('답글 남기기 버튼 자동 클릭 완료');

                  // 답글 작성 폼이 생성될 때까지 대기
                  let observer2 = null;
                  observer2 = new MutationObserver((mutations, obs2) => {
                    const replyInput = document.querySelector('div[role="textbox"][data-lexical-editor="true"]');
                    if (replyInput) {
                      console.log('답글 작성 폼이 생성됨');
                      obs2.disconnect();
                      observer2 = null;
                      replyInput.focus();
                      console.log('답글 입력창에 포커스 설정됨');
                      let replyTimeout = setTimeout(() => {
                        try {
                          const success = document.execCommand('insertText', false, '스하리~');
                          if (success) {
                            console.log('execCommand("insertText")로 텍스트 입력 성공');
                            let postTimeout = setTimeout(() => {
                              const allButtons = document.querySelectorAll('div[role="button"]');
                              const postBtn = Array.from(allButtons).find(btn => {
                                const textDiv = btn.querySelector('div');
                                return textDiv && textDiv.textContent.trim() === '게시';
                              });
                              
                              if (postBtn) {
                                postBtn.click();
                                console.log('게시 버튼 자동 클릭 완료');
                                // 1초 후 itemfinder.co.kr 사용자 홈으로 이동
                                setTimeout(() => {
                                  window.location.href = 'https://www.threads.com/@itemfinder.co.kr';
                                }, 1000);
                              } else {
                                console.log('게시 버튼을 찾지 못했습니다.');
                                // 디버깅을 위해 모든 버튼 출력
                                console.log('찾은 모든 버튼:', allButtons.length);
                                allButtons.forEach(btn => {
                                  const textDiv = btn.querySelector('div');
                                  if (textDiv) {
                                    console.log('버튼 텍스트:', textDiv.textContent.trim());
                                  }
                                });
                              }
                              clearTimeout(postTimeout);
                            }, 300);
                          } else {
                            console.log('execCommand("insertText") 실패, execCommand("paste")를 시도해보세요.');
                          }
                          clearTimeout(replyTimeout);
                        } catch (e) {
                          console.error('execCommand("insertText") 중 오류:', e);
                        }
                      }, 1000);
                    }
                  });
                  observer2.observe(document.body, { childList: true, subtree: true });
                  // 5초 후 observer2 자동 해제 (메모리 누수 방지)
                  let observer2Timeout = setTimeout(() => {
                    if (observer2) {
                      observer2.disconnect();
                      observer2 = null;
                      console.log('답글 작성 폼 observer 타임아웃으로 해제');
                    }
                    clearTimeout(observer2Timeout);
                  }, 5000);
                } else {
                  console.log('답글 남기기 버튼을 찾지 못했습니다.');
                }
              }, 1000);
            } else {
              console.log('두 번째 리포스트 버튼을 찾지 못했습니다.');
            }
          } else {
            console.log('리포스트 팝업을 찾지 못했습니다.');
          }
        }, 1500);
      } else {
        console.log('리포스트 버튼을 찾지 못했습니다.');
      }
    }, 500);
  }, 500);
}

// 게시물 링크 리스트 표시 함수
function displayPostLinks() {
  // 현재 URL이 검색 페이지인지 확인
  if (!window.location.href.includes('threads.com/search')) {
    console.log('검색 페이지가 아니므로 링크 리스트를 표시하지 않습니다.');
    return;
  }

  // 기존 리스트 컨테이너 제거
  const existingContainer = document.getElementById('post-links-container');
  if (existingContainer) {
    existingContainer.remove();
  }

  // 모든 게시물 링크 찾기
  postLinks = Array.from(document.querySelectorAll('a[href*="/post/"]'));
  if (postLinks.length === 0) {
    console.log('검색 결과에서 게시물 링크를 찾을 수 없습니다.');
    return;
  }

  // 리스트 컨테이너 생성
  const container = document.createElement('div');
  container.id = 'post-links-container';
  container.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    width: 300px;
    max-height: 80vh;
    overflow-y: auto;
    background: white;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 999999;
    font-family: Arial, sans-serif;
  `;

  // 제목과 컨트롤 버튼 컨테이너
  const headerContainer = document.createElement('div');
  headerContainer.style.cssText = `
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eee;
  `;

  const title = document.createElement('h3');
  title.textContent = '게시물 링크 목록';
  title.style.cssText = `
    margin: 0;
    font-size: 16px;
    color: #262626;
  `;

  const controlContainer = document.createElement('div');
  controlContainer.style.cssText = `
    display: flex;
    gap: 8px;
  `;

  const startButton = document.createElement('button');
  startButton.textContent = '시작';
  startButton.style.cssText = `
    padding: 6px 12px;
    background-color: #0095f6;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    font-weight: bold;
    transition: background-color 0.2s;
  `;
  startButton.onmouseover = () => {
    startButton.style.backgroundColor = '#0081d6';
  };
  startButton.onmouseout = () => {
    startButton.style.backgroundColor = '#0095f6';
  };
  startButton.onclick = () => {
    isAutoNavigateEnabled = true;
    currentIndex = 0;
    navigateToNextPost();
  };

  const stopButton = document.createElement('button');
  stopButton.textContent = '중지';
  stopButton.style.cssText = `
    padding: 6px 12px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 12px;
    font-weight: bold;
    transition: background-color 0.2s;
  `;
  stopButton.onmouseover = () => {
    stopButton.style.backgroundColor = '#c82333';
  };
  stopButton.onmouseout = () => {
    stopButton.style.backgroundColor = '#dc3545';
  };
  stopButton.onclick = () => {
    isAutoNavigateEnabled = false;
  };

  controlContainer.appendChild(startButton);
  controlContainer.appendChild(stopButton);
  headerContainer.appendChild(title);
  headerContainer.appendChild(controlContainer);
  container.appendChild(headerContainer);

  // 링크 리스트 생성
  const list = document.createElement('ul');
  list.style.cssText = `
    list-style: none;
    padding: 0;
    margin: 0;
  `;

  postLinks.forEach((link, index) => {
    const href = link.getAttribute('href');
    // href에서 사용자명 추출
    let userId = null;
    const match = href.match(/\/(@[\w.\-]+)/);
    if (match && match[1]) {
      userId = match[1];
    }
    const text = userId || `게시물 ${index + 1}`;
    
    const listItem = document.createElement('li');
    listItem.style.cssText = `
      padding: 8px;
      border-bottom: 1px solid #eee;
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: background-color 0.2s;
    `;
    listItem.onmouseover = () => {
      listItem.style.backgroundColor = '#f8f9fa';
    };
    listItem.onmouseout = () => {
      listItem.style.backgroundColor = 'white';
    };

    const linkText = document.createElement('span');
    linkText.textContent = text;
    linkText.style.cssText = `
      flex: 1;
      margin-right: 10px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      color: #262626;
    `;

    const copyButton = document.createElement('button');
    copyButton.textContent = '복사';
    copyButton.style.cssText = `
      padding: 4px 8px;
      background-color: #0095f6;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
      transition: background-color 0.2s;
    `;
    copyButton.onmouseover = () => {
      copyButton.style.backgroundColor = '#0081d6';
    };
    copyButton.onmouseout = () => {
      copyButton.style.backgroundColor = '#0095f6';
    };
    copyButton.onclick = () => {
      navigator.clipboard.writeText(href).then(() => {
        copyButton.textContent = '복사됨!';
        setTimeout(() => {
          copyButton.textContent = '복사';
        }, 1000);
      });
    };

    listItem.appendChild(linkText);
    listItem.appendChild(copyButton);
    list.appendChild(listItem);
  });

  container.appendChild(list);
  document.body.appendChild(container);
}

// 다음 게시물로 이동하는 함수
function navigateToNextPost() {
  if (!isAutoNavigateEnabled || currentIndex >= postLinks.length) {
    isAutoNavigateEnabled = false;
    return;
  }

  const link = postLinks[currentIndex];
  const href = link.getAttribute('href');
  if (href) {
    console.log(`게시물 ${currentIndex + 1}로 이동:`, href);
    window.location.href = href;
  }
  currentIndex++;
}

// 페이지 소유자와 게시글 작성자가 동일할 때만 팔로우 자동 실행
function autoFollowIfOwnerIsAuthor() {
  // 1. 현재 페이지 주소에서 아이디 추출
  const match = window.location.pathname.match(/^\/(@[\w.\-]+)\/post\//);
  if (!match) return;
  const pageOwnerId = match[1].replace('@', '');

  // 2. 게시글 작성자 아이디 추출
  const userLink = document.querySelector('.x1a2a7pz.x1n2onr6 a[href^="/@"]');
  if (!userLink) return;
  const authorHref = userLink.getAttribute('href');
  const authorId = authorHref.replace('/@', '');

  // 3. 동일할 때만 팔로우
  if (pageOwnerId === authorId) {
    autoHoverAndFollowUser(authorId);
  }
}

// 페이지 로딩 완료 시 실행
function initializeExtension() {
  if (document.readyState === 'complete') {
    displayPostLinks();
    autoClickLikeAndRepostWithNotify();
    autoFollowIfOwnerIsAuthor();
    clickRepostButton(); // 리포스트 기능 추가
  } else {
    window.addEventListener('load', () => {
      setTimeout(() => {
        displayPostLinks();
        autoClickLikeAndRepostWithNotify();
        autoFollowIfOwnerIsAuthor();
        clickRepostButton(); // 리포스트 기능 추가
      }, 1000);
    });
  }
}

// DOM이 준비되면 실행
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeExtension);
} else {
  initializeExtension();
}

// 클릭 이벤트 리스너 추가
document.addEventListener('click', function(event) {
  // 클릭된 요소의 정보 수집
  const clickedElement = event.target;
  const elementInfo = {
    tagName: clickedElement.tagName,
    className: clickedElement.className,
    id: clickedElement.id,
    textContent: clickedElement.textContent?.trim(),
    href: clickedElement.href,
    timestamp: new Date().toISOString()
  };

  // 클릭된 요소의 부모 요소들 정보 수집
  const parentElements = [];
  let parent = clickedElement.parentElement;
  while (parent) {
    parentElements.push({
      tagName: parent.tagName,
      className: parent.className,
      id: parent.id
    });
    parent = parent.parentElement;
  }

  // 로그 출력
  console.group('클릭 이벤트 발생');
  console.log('클릭된 요소:', elementInfo);
  console.log('부모 요소들:', parentElements);
  console.log('이벤트 발생 시간:', elementInfo.timestamp);
  console.groupEnd();
});

// 메시지 리스너 추가
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'getUserIds') {
    const userIds = extractUserIds();
    sendResponse({ userIds: userIds });
  } else if (request.action === 'clickFirstUser') {
    clickFirstUserContent();
    sendResponse({ success: true });
  }
});

// 특정 게시자 아이디에 마우스 오버 효과 및 팔로우 버튼 자동 클릭
function autoHoverAndFollowUser(userId) {
  // 1. 타겟 a 요소 찾기
  const parent = document.querySelector('.x1a2a7pz.x1n2onr6');
  if (parent) {
    const userLink = parent.querySelector(`a[href="/@${userId}"]`);
    if (userLink) {
      // 여러 마우스 이벤트 강제 발생
      ['mouseover', 'mouseenter', 'mousemove'].forEach(type => {
        const event = new MouseEvent(type, { bubbles: true, cancelable: true, view: window });
        userLink.dispatchEvent(event);
      });
      // 1초 후 팔로우 버튼 클릭 시도
      setTimeout(() => {
        const followBtn = Array.from(document.querySelectorAll('div[role="button"]'))
          .find(btn => btn.innerText.trim() === '팔로우');
        if (followBtn) {
          followBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
          followBtn.click();
          console.log('팔로우 버튼 자동 클릭 완료');
        } else {
          console.log('팔로우 버튼을 찾지 못했습니다.');
        }
      }, 1000);
    }
  }
}

// 사용 예시: itemfinder.co.kr 계정에 대해 자동 팔로우
// autoHoverAndFollowUser('itemfinder.co.kr');

document.querySelectorAll('.x1a2a7pz.x1n2onr6 a[href^="/@"]').forEach(link => {
  link.addEventListener('mouseenter', function(e) {
    console.log('마우스 오버 발생:', link, '아이디:', link.getAttribute('href'));
  });
});

// 답글 입력창에 '스하리~' 입력
setTimeout(() => {
  const replyInput = document.querySelector('div[role="textbox"][data-lexical-editor="true"]');
  if (replyInput) {
    // Lexical 에디터의 editorState에 접근
    const editor = replyInput.__lexicalEditor;
    if (editor) {
      // 에디터 상태 업데이트
      editor.update(() => {
        const root = editor.getRootElement();
        const paragraph = document.createElement('p');
        paragraph.className = 'xdj266r x11i5rnm xat24cr x1mh8g0r';
        paragraph.dir = 'ltr';
        
        const span = document.createElement('span');
        span.setAttribute('data-lexical-text', 'true');
        span.textContent = '스하리~';
        
        paragraph.appendChild(span);
        root.appendChild(paragraph);
      });

      console.log('Lexical 에디터에 텍스트 입력 완료');
    } else {
      console.log('Lexical 에디터를 찾지 못했습니다.');
    }
  } else {
    console.log('답글 입력창을 찾지 못했습니다.');
  }
}, 500); // 답글 입력창이 나타날 때까지 0.5초 대기

// 리포스트 버튼을 찾고 클릭하는 함수
function clickRepostButton() {
  // 첫 번째 리포스트 버튼 찾기
  const repostBtn = document.querySelector('div.x6s0dn4.x78zum5.x1szn6h9.x1n2onr6.x1qrby5j.x1vjfegm.xisnujt');
  
  if (repostBtn) {
    // 마우스 이벤트 강제 발생
    ['mouseover', 'mouseenter', 'mousemove', 'click'].forEach(type => {
      const event = new MouseEvent(type, {
        bubbles: true,
        cancelable: true,
        view: window
      });
      repostBtn.dispatchEvent(event);
    });
    
    showToast('리포스트 버튼이 클릭되었습니다!');
    console.log('리포스트 버튼 클릭 완료');
    
    // 리포스트 팝업에서 두 번째 리포스트 버튼 클릭 (3초 후)
    setTimeout(() => {
      console.log('두 번째 리포스트 버튼 찾기 시작...');
      
      // 모든 버튼 요소 찾기
      const allButtons = document.querySelectorAll('div[role="button"]');
      console.log('찾은 모든 버튼:', allButtons.length);
      
      // 리포스트 텍스트를 포함하는 버튼 찾기
      const secondRepostBtn = Array.from(allButtons).find(btn => {
        const span = btn.querySelector('span');
        return span && span.textContent === '리포스트';
      });
      
      if (secondRepostBtn) {
        console.log('두 번째 리포스트 버튼 찾음:', secondRepostBtn);
        
        // 마우스 이벤트 강제 발생
        ['mouseover', 'mouseenter', 'mousemove', 'click'].forEach(type => {
          const event = new MouseEvent(type, {
            bubbles: true,
            cancelable: true,
            view: window
          });
          secondRepostBtn.dispatchEvent(event);
        });
        
        showToast('두 번째 리포스트 버튼이 클릭되었습니다!');
        console.log('두 번째 리포스트 버튼 클릭 완료');
      } else {
        console.log('두 번째 리포스트 버튼을 찾지 못했습니다.');
        // 현재 페이지의 모든 버튼 텍스트 출력
        allButtons.forEach(btn => {
          const span = btn.querySelector('span');
          if (span) {
            console.log('버튼 텍스트:', span.textContent);
          }
        });
      }
    }, 3000);
  } else {
    console.log('리포스트 버튼을 찾지 못했습니다.');
  }
} 